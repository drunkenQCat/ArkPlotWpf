name: .NET Core Desktop CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: windows-latest

    env:
      Solution_Name: ArkPlotWpf.sln  # 假设解决方案名称和项目文件名相同，如果不是，请进行调整
      # Test_Project_Path: Tests\ArkPlot.Tests.csproj  #请替换为您的测试项目路径

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'  # 更新为您项目的目标.NET版本

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Execute unit tests
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    - name: Build
      run: dotnet build ${{ env.Solution_Name }} --no-restore --configuration ${{ matrix.configuration }}

    - name: Publish
      run: dotnet publish ${{ env.Solution_Name }} --no-build --configuration ${{ matrix.configuration }} --output ${{ github.workspace }}/Publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: PublishedApp
        path: ${{ github.workspace }}/Publish

    # 提取版本号
    - name: Extract version
      id: extract_version
      run: |
        $csprojPath = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        $version = Select-String -Path $csprojPath -Pattern '<Version>(.*)</Version>' -AllMatches | ForEach-Object { $_.Matches } | ForEach-Object { $_.Groups[1].Value }
        echo "Version=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "::set-output name=project_version::$version"

    - name: Get the latest release
      id: latest_release
      uses: actions/github-script@v5
      with:
        script: |
          const response = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          return {
            tag_name: response.data.tag_name,
            commit_sha: response.data.target_commitish,
          }

    - name: Get commits since last release
      id: get_commits
      run: |
        $commitSha = "${{ steps.latest_release.outputs.commit_sha }}"
        # 检查commitSha是否为空，如果为空，回退到全历史commit
        if ([string]::IsNullOrWhiteSpace($commitSha)) {
          $commitSha = "HEAD"
        }
        $commits = git log $commitSha..HEAD --pretty=format:"%s" | Where-Object { $_ -like "*:*" } | Out-String
        echo "::set-output name=commits::$commits"

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.project_version }}
        release_name: Release v${{ steps.extract_version.outputs.project_version }}
        body: |
          Changes in this release:
          ${{ steps.get_commits.outputs.commits }}
        draft: false
        prerelease: false
