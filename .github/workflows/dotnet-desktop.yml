name: .NET Core Desktop CI
permissions:
  contents: write

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - ci-test
    tags:
      - v*

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: ArkPlotWpf.csproj # 假设解决方案名称和项目文件名相同，如果不是，请进行调整
      # Test_Project_Path: Tests\ArkPlot.Tests.csproj  #请替换为您的测试项目路径

    strategy:
      matrix:
        configuration: [Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x" # 更新为您项目的目标.NET版本

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      - name: Build
        run: |
          dotnet build ${{ env.Solution_Name }} --no-restore --configuration ${{ matrix.configuration }}
          dotnet publish ${{ env.Solution_Name }} --no-build --configuration ${{ matrix.configuration }} --output ${{ github.workspace }}/Publish
          # html文件路径
          $sourceHtml = Get-ChildItem .\assets\*.html

          # 目标文件路径
          $publishPath = "${{ github.workspace }}\Publish\assets"

          # 获取目标文件夹路径（不包括文件名）

          # 检查目标文件夹是否存在
          if (-not (Test-Path -Path $publishPath))
          {
              # 目标文件夹不存在，创建它
              New-Item -ItemType Directory -Path $publishPath
          }

          # 现在路径已经确保存在，复制文件到目标路径
          $sourceHtml|ForEach-Object{Copy-Item -Force $_ $publishPath}
          Get-ChildItem $publistPath



      # 提取版本号
      - name: Extract version
        id: extract_version
        run: |
          $csprojPath = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          $version = Select-String -Path $csprojPath -Pattern '<Version>(.*)</Version>' -AllMatches | ForEach-Object { $_.Matches } | ForEach-Object { $_.Groups[1].Value }
          echo "version=$version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "### 我day到了!是$version! :rocket:" >> $env:GITHUB_STEP_SUMMARY

      - name: Zip the published app
        run: |
          $version = ${{steps.extract_version.outputs.version}}
          echo "$version"
          Compress-Archive -Path ${{ github.workspace }}/Publish/* -DestinationPath ${{ github.workspace }}/ArkPlot${{ steps.extract_version.outputs.version }}_Win-X64.zip

      - name: Create Release and Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: ArkPlot ${{ steps.extract_version.outputs.version }}
          body: TODO New Release.
          draft: false
          prerelease: false
          files: |
            *.zip
